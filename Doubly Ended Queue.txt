#include <iostream>
using namespace std;
struct Node {
int data;
Node* prev;
Node* next;
};
class Deque {
private:
Node* front;
Node* rear;
int capacity;
int size;
public:
Deque(int capacity) {
front = nullptr;
rear = nullptr;
this->capacity = capacity;
size = 0;
}
bool isEmpty() {
return size == 0;
}
bool isFull() {
return size == capacity;
}
void pushFront(int data) {
if (isFull()) {
std::cout << "Deque is full" << std::endl;
return;
}
Node* newNode = new Node{ data, nullptr, front };
if (isEmpty()) {
front = newNode;
rear = newNode;
} else {
front->prev = newNode;
front = newNode;
}
size++;
}
void pushBack(int data) {
if (isFull()) {
std::cout << "Deque is full" << std::endl;
return;
}
Node* newNode = new Node{ data, rear, nullptr };
if (isEmpty()) {
front = newNode;
rear = newNode;
} else {
rear->next = newNode;
rear = newNode;
}
size++;
}
int popFront() {
if (isEmpty()) {
std::cout << "Deque is empty" << std::endl;
return -1;
}
int data = front->data;
Node* temp = front;
if (front == rear) {
front = nullptr;
rear = nullptr;
} else {
front = front->next;
front->prev = nullptr;
}
delete temp;
size--;
return data;
}
int popBack() {
if (isEmpty()) {
std::cout << "Deque is empty" << std::endl;
return -1;
}
int data = rear->data;
Node* temp = rear;
if (front == rear) {
front = nullptr;
rear = nullptr;
} else {
rear = rear->prev;
rear->next = nullptr;
}
delete temp;
size--;
return data;
}
int frontElement() {
if (isEmpty()) {
std::cout << "Deque is empty" << std::endl;
return -1;
}
return front->data;
}
int rearElement() {
if (isEmpty()) {
std::cout << "Deque is empty" << std::endl;
return -1;
}
return rear->data;
}
void display() {
if (isEmpty()) {
std::cout << "Deque is empty" << std::endl;
return;
}
Node* temp = front;
while (temp != nullptr) {
std::cout << temp->data << " ";
temp = temp->next;
}
std::cout << std::endl;
}
};
int main() {
cout<<"latecommers = ";	
Deque myDeque(5);
myDeque.pushFront(3);
myDeque.pushFront(7);
myDeque.pushBack(5);
myDeque.pushBack(9);
std::cout << "Deque elements: ";
myDeque.display(); 
std::cout << "Front element: " << myDeque.frontElement() << std::endl; 
//element: 7
std::cout << "Rear element: " << myDeque.rearElement() << std::endl; 
//element: 9
std::cout << "Popped front element: " << myDeque.popFront() << std::endl; 
std::cout << "Popped back element: " << myDeque.popBack() << std::endl;
std::cout << "Deque elements after popping: ";
myDeque.display();
return 0;
}
