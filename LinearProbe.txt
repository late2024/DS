#include <iostream>
#define size 10
using namespace std;
int ht[size];

void store(int x[], int n);
int modulodivision(int key);
int linearprobe(int address);

int main()
{
	cout<<"latecommers = ";
    int i, n, x[10];
    char ch;
    std::cout << "Enter the number of elements: ";
    std::cin >> n;
    std::cout << "Enter the elements:\n";
    for (i = 0; i < n; i++)
    {
        std::cin >> x[i];
    }
    store(x, n);
    std::cout << "Hashtable is as shown:\n";
    for (i = 0; i < size; i++)
    {
        std::cout << ht[i] << " ";
    }
    return 0;
}

void store(int x[], int n)
{
    int i, key, address;
    // Initializing hash table to empty
    for (i = 0; i < size; i++)
        ht[i] = -1;
    // Copying elements from original array to hashtable
    for (i = 0; i < n; i++)
    {
        key = x[i];
        address = modulodivision(key);
        if (ht[address] != -1)
            address = linearprobe(address);
        ht[address] = key;
    }
}

// Hash Function
int modulodivision(int key)
{
    int address;
    address = key % size + 1;
    if (address == size)
    {
        return 0;
    }
    else
    {
        return address;
    }
}

// Collision Resolution
int linearprobe(int address)
{
    while (ht[address] != -1)
    {
        address++;
        if (address == size)
            address = 0;
    }
    return address;
}


