class Node {
public:
    int data;
    int priority;
    Node *next;

    Node(int data, int priority) {
        this->data = data;
        this->priority = priority;
        next = nullptr;
    }
};

class PriorityQueue {
private:
    Node *head;

public:
    PriorityQueue() {
        head = nullptr;
    }

    bool isEmpty() {
        return head == nullptr;
    }

    void enqueue(int data, int priority) {
        Node *newNode = new Node(data, priority);

        if (isEmpty()) {
            head = newNode;
            return;
        }

        if (newNode->priority > head->priority) {
            newNode->next = head;
            head = newNode;
            return;
        }

        Node *temp = head;
        while (temp->next != nullptr && temp->next->priority >= newNode->priority) {
            temp = temp->next;
        }

        newNode->next = temp->next;
        temp->next = newNode;
    }

    int dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty" << endl;
            return -1;
        }

        int data = head->data;
        Node *temp = head;
        head = head->next;
        delete temp;

        return data;
    }

    int frontElement() {
        if (isEmpty()) {
            cout << "Queue is empty" << endl;
            return -1;
        }

        return head->data;
    }

    void display() {
        if (isEmpty()) {
            cout << "Queue is empty" << endl;
            return;
        }

        Node *temp = head;
        while (temp != nullptr) {
            cout << temp->data << "(" << temp->priority << ")" << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};