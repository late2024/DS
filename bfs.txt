#include<iostream>
#include<queue>
#define NODE 6
using namespace std;

typedef struct node
{
    int val;
    int state;
} node;

int graph[NODE][NODE] =
{
    {0, 1, 1, 1, 0, 0},
    {1, 0, 0, 1, 1, 0},
    {1, 0, 0, 1, 0, 1},
    {1, 1, 1, 1, 0, 1},
    {0, 1, 0, 1, 0, 1},
    {0, 0, 1, 1, 1, 0},
};

void bfs(node* vert, node s)
{
    node u;
    int i, j;
    queue<node> que;
    for (i = 0; i < NODE; i++)
    {
        vert[i].state = 0;
    }

    vert[s.val].state = 1;
    que.push(s);
    while (!que.empty())
    {
        u = que.front();
        que.pop();
        cout << char(u.val + 'A') << " ";
        for (i = 0; i < NODE; i++)
        {
            if (graph[u.val][i]) // Fix: use u.val instead of i in graph access
            {
                if (vert[i].state == 0)
                {
                    vert[i].state = 1;
                    que.push(vert[i]);
                }
            }
        }
        vert[u.val].state = 2; // Fix: use u.val instead of i to update the state
    }
}

int main()
{
cout << "BHUSHAN 09: 
\n";
    node vertices[NODE];
    node start;
    char s;
    for (int i = 0; i < NODE; i++)
    {
        vertices[i].val = i;
    }
    s = 'B';
    start.val = s - 'A';
    cout << "BFS Traversal:";
    bfs(vertices, start);
    cout << endl;

    return 0; // Added return statement
}

